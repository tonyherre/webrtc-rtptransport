<pre class="metadata">
Title: WebRTC RTP Transport
Shortname: webrtc-rtptransport
Level: None
Status: UD
Group: webrtc
ED: https://w3c.github.io/webrtc-rtptransport/
TR: https://www.w3.org/TR/webrtc-rtptransport/
Repository: w3c/webrtc-rtptransport
URL: https://github.com/w3c/webrtc-rtptransport
Editor: Peter Thatcher, w3cid 68236, Microsoft Corporation https://www.microsoft.com, pthatcher@microsoft.com
Editor: Tony Herre, Google https://www.google.com, herre@google.com
Editor: Bernard Aboba, w3cid 65611, Microsoft Corporation https://www.microsoft.com, bernarda@microsoft.com

Abstract: 
  The WebRTC-RtpTransport API allows web applications to send and receive RTP/RTCP packets
  using the protocol defined in [[!RFC3550]].
Boilerplate: omit conformance
Complain About:accidental-2119 yes
Markup Shorthands: css no, markdown yes, dfn yes
!Participate: <a href="https://github.com/w3c/webrtc-rtptransport">Git Repository.</a>
!Participate: <a href="https://github.com/w3c/webrtc-rtptransport/issues/new">File an issue.</a>
!Version History: <a href="https://github.com/w3c/webrtc-rtptransport/commits">https://github.com/w3c/webrtc-rtptransport/commits</a>
</pre>
<pre class=link-defaults>
spec:webidl; type:dfn; text:resolve
</pre>
<pre class=biblio>
{
  "WEBCODECS": {
     "title": "WebCodecs",
     "href": "https://www.w3.org/TR/webcodecs/",
     "status": "None",
     "publisher": "IETF"
   },
    "RFC3550": {
      "title": "RTP: A Transport Protocol for Real-Time Applications",
      "href": "https://datatracker.ietf.org/doc/html/rfc3550",
      "authors": [
        "H. Schulzrinne",
        "S. Casner",
        "R. Frederick",
        "V. Jacobson"
      ],
      "status": "July 2003. RFC",
      "publisher": "IETF"
    },
    "RFC3551": {
      "title": "RTP Profile for Audio and Video Conferences with Minimal Control",
      "href": "https://datatracker.ietf.org/doc/html/rfc3551",
      "authors": [
        "H. Schulzrinne",
        "S. Casner"
      ],
      "status": "July 2003. RFC",
      "publisher": "IETF"
    },
    "RFC3711": {
      "title": "The Secure Real-time Transport Protocol (SRTP)",
      "href": "https://datatracker.ietf.org/doc/html/rfc3711",
      "authors": [
        "M. Baugher",
        "D. McGrew",
        "M. Naslund",
        "E. Carrara",
        "K. Norrman"
      ],
      "status": "March 2004. RFC",
      "publisher": "IETF"
    },
    "RFC3890": {
      "title": "A Transport Independent Bandwidth Modifier for the Session Description Protocol (SDP)",
      "href": "https://datatracker.ietf.org/doc/html/rfc3890",
      "authors": [
        "M. Westerlund"
      ],
      "status": "September 2004. RFC",
      "publisher": "IETF"
    },
    "RFC4103": {
      "title": "RTP Payload for Text Conversation",
      "href": "https://datatracker.ietf.org/doc/html/rfc4103",
      "authors": [
        "G. Hellstrom",
        "P. Jones"
      ],
      "status": "June 2005. RFC",
      "publisher": "IETF"
    },
    "RFC4585": {
      "title": "Extended RTP Profile for RTCP-Based Feedback (RTP/AVPF)",
      "href": "https://datatracker.ietf.org/doc/html/rfc4585",
      "authors": [
        "J. Ott",
        "S. Wenger",
        "N. Sato",
        "C. Burmeister",
        "J. Rey"
      ],
      "status": "July 2006. RFC",
      "publisher": "IETF"
    },
   "RFC4961": {
      "title": "Symmetric RTP/RTC Control Protocol (RTCP)",
      "href": "https://datatracker.ietf.org/doc/html/rfc4961",
      "authors": [
        "D. Wing"
      ],
      "status": "July 2007. RFC",
      "publisher": "IETF"
    },
    "RFC5104": {
      "title": "Codec Control Messages in the RTP Audio-Visual Profile with Feedback (AVPF)",
      "href": "https://datatracker.ietf.org/doc/html/rfc5104",
      "authors": [
        "S. Wenger",
        "U. Chandra",
        "M. Westerlund",
        "B. Burman"
      ],
      "status": "February 2008. RFC",
      "publisher": "IETF"
    },
    "RFC5124": {
      "title": "Extended Secure RTP Profile for Real-time Transport Control Protocol (RTCP)-Based Feedback (RTP/SAVPF)",
      "href": "https://datatracker.ietf.org/doc/html/rfc5124",
      "authors": [
        "J. Ott",
        "E. Carrara"
      ],
      "status": "February 2008. RFC",
      "publisher": "IETF"
    },
    "RFC5450": {
      "title": "Transmission Time Offsets in RTP Streams",
      "href": "https://datatracker.ietf.org/doc/html/rfc5450",
      "authors": [
        "D. Singer",
        "H. Desineni"
      ],
      "status": "March 2009. RFC",
      "publisher": "IETF"
    },
    "RFC5506": {
      "title": "Support for Reduced-Size Real-Time Transport Control Protocol (RTCP): Opportunities and Consequences",
      "href": "https://datatracker.ietf.org/doc/html/rfc5506",
      "authors": [
        "I. Johansson",
        "M. Westerlund"
      ],
      "status": "April 2009. RFC",
      "publisher": "IETF"
    },
    "RFC5761": {
      "title": "Multiplexing RTP Data and Control Packets on a Single Port",
      "href": "https://datatracker.ietf.org/doc/html/rfc5761",
      "authors": [
        "C. Perkins",
        "M. Westerlund"
      ],
      "status": "April 2010. RFC",
      "publisher": "IETF"
    },
    "RFC6051": {
      "title": "Rapid Synchronisation of RTP Flows",
      "href": "https://datatracker.ietf.org/doc/html/rfc6051",
      "authors": [
        "C. Perkins",
        "T. Schierl"
      ],
      "status": "November 2010. RFC",
      "publisher": "IETF"
    },
    "RFC6263": {
      "title": "Application Mechanism for Keeping Alive the NAT Mappings Associated with RTP / RTP Control Protocol (RTCP) Flows",
      "href": "https://datatracker.ietf.org/doc/html/rfc6263",
      "authors": [
        "X. Marjou",
        "A. Sollaud"
      ],
      "status": "June 2011. RFC",
      "publisher": "IETF"
    },
    "RFC6464": {
      "title": "A Real-time Transport Protocol (RTP) Header Extension for Client-to-Mixer Audio Level Indication",
      "href": "https://datatracker.ietf.org/doc/html/rfc6464",
      "authors": [
        "J. Lennox, Ed.",
        "E. Ivov",
        "E. Marocco"
      ],
      "status": "December 2011. RFC",
      "publisher": "IETF"
    },
    "RFC6465": {
      "title": "A Real-time Protocol (RTP) Header Extension for Mixer-to-Client Audio Level Indication",
      "href": "https://datatracker.ietf.org/doc/html/rfc6465",
      "authors": [
        "E. Ivov",
        "E. Marocco",
        "J. Lennox"
      ],
      "status": "December 2011. RFC",
      "publisher": "IETF"
    },
    "RFC6904": {
      "title": "Encryption of Header Extensions in the SRTP",
      "href": "https://datatracker.ietf.org/doc/html/rfc6904",
      "authors": [
        "J. Lennox"
      ],
      "status": "April 2013. RFC",
      "publisher": "IETF"
    },
    "RFC7022": {
      "title": "Guidelines for Choosing RTP Control Protocol (RTCP) Canonical Names (CNAMEs)",
      "href": "https://datatracker.ietf.org/doc/html/rfc7022",
      "authors": [
        "A. Begen",
        "C. Perkins",
        "D. Wing",
        "E. Rescorla"
      ],
      "status": "September 2013. RFC",
      "publisher": "IETF"
    },
    "RFC7160": {
      "title": "Support for Multiple Clock Rates in an RTP Session",
      "href": "https://datatracker.ietf.org/doc/html/rfc7160",
      "authors": [
        "M. Petit-Huguenin",
        "G. Zorn"
      ],
      "status": "April 2014. RFC",
      "publisher": "IETF"
    },
    "RFC7656": {
      "title": "A Taxonomy of Semantics and Mechanisms for Real-Time Transport Protocol (RTP) Sources",
      "href": "https://datatracker.ietf.org/doc/html/rfc7656",
      "authors": [
        "J. Lennox",
        "K. Gross",
        "S. Nandakumar",
        "G. Salgueiro",
        "B. Burman"
      ],
      "status": "November 2015. RFC",
      "publisher": "IETF"
    },
    "RFC8082": {
      "title": "Using Codec Control Messages in the RTP Audio-Visual Profile with Feedback with Layered Codecs",
      "href": "https://datatracker.ietf.org/doc/html/rfc8082",
      "authors": [
        "S. Wenger",
        "J. Lennox",
        "B. Burman"
      ],
      "status": "March 2017. RFC",
      "publisher": "IETF"
    },
    "RFC8108": {
      "title": "Sending Multiple RTP Streams in a Single RTP Session",
      "href": "https://datatracker.ietf.org/doc/html/rfc8108",
      "authors": [
        "J. Lennox",
        "M. Westerlund",
        "Q. Wu",
        "C. Perkins"
      ],
      "status": "March 2017. RFC",
      "publisher": "IETF"
    },
    "RFC8285": {
      "title": "A General Mechanism for RTP Header Extensions",
      "href": "https://datatracker.ietf.org/doc/html/rfc8285",
      "authors": [
        "D. Singer",
        "H. Desineni",
        "R. Even"
      ],
      "status": "October 2017. RFC",
      "publisher": "IETF"
    },
    "RFC8627": {
      "title": "RTP Payload Format for Flexible Forward Error Correction (FEC)",
      "href": "https://datatracker.ietf.org/doc/html/rfc8627",
      "authors": [
        "M. Zanaty",
        "V. Singh",
        "A. Begen",
        "G. Mandyam"
      ],
      "status": "July 2019. RFC",
      "publisher": "IETF"
    },
    "RFC8834": {
      "title": "Media Transport and Use of RTP in WebRTC",
      "href": "https://datatracker.ietf.org/doc/html/rfc8834",
      "authors": [
        "C. Perkins",
        "M. Westerlund",
        "J. Ott"
      ],
      "status": "January 2021. RFC",
      "publisher": "IETF"
    },
    "RFC8852": {
      "title": "RTP Stream Identifier Source Description (SDES)",
      "href": "https://datatracker.ietf.org/doc/html/rfc8852",
      "authors": [
        "A. Roach",
        "S. Nandakumar",
        "P. Thatcher"
      ],
      "status": "January 2021. RFC",
      "publisher": "IETF"
    },
    "RFC8861": {
      "title": "Sending Multiple RTP Streams in a Single RTP Session: Grouping RTP Control Protocol (RTCP) Reception Statistics and Other Feedback",
      "href": "https://datatracker.ietf.org/doc/html/rfc8861",
      "authors": [
        "J. Lennox",
        "M. Westerlund",
        "Q. Wu",
        "C. Perkins"
      ],
      "status": "January 2021. RFC",
      "publisher": "IETF"
    },
    "RFC9335": {
      "title": "Completely Encrypting RTP Header Extensions and Contributing Sources",
      "href": "https://datatracker.ietf.org/doc/html/rfc9335",
      "authors": [
        "J. Uberti",
        "C. Jennings",
        "G. Murillo"
      ],
      "status": "January 2023. RFC",
      "publisher": "IETF"
    },
    "RFC9443": {
      "title": "Multiplexing Scheme Updates for QUIC",
      "href": "https://datatracker.ietf.org/doc/html/rfc9443",
      "authors": [
        "B. Aboba",
        "G. Salgueiro",
        "C. Perkins"
      ],
      "status": "July 2023. RFC",
      "publisher": "IETF"
    }
}
</pre>
<style>
main > dl > dd {
  margin-bottom: 1em;
}

table {
  width: 100%;
}

table#sample-types td, table#sample-types th {
  text-align: center;
}

table#sample-types .even {
    background-color: lightgrey;
}

.rfc2119 {
  text-transform: lowercase;
  font-variant: small-caps;
  font-style: normal;
}

</style>
<pre class=link-defaults>
spec:streams; type:interface; text:ReadableStream
</pre>

# Introduction # {#introduction}

*This section is non-normative.*

This specification uses [[!RFC3550]] to send and receive RTP and RTCP packets.

Note: The API presented in this specification represents a preliminary proposal
based on work-in-progress within the W3C WEBRTC WG. As a result, the API is likely
to change significantly going forward. 

# Conformance #  {#conformance}

As well as sections marked as non-normative, all authoring guidelines,
diagrams, examples, and notes in this specification are non-normative.
Everything else in this specification is normative.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" are to be interpreted as described in 
[[!RFC2119]] and [[!RFC8174]] when, and only when, they appear in all capitals, as shown here.

This specification defines conformance criteria that apply to a single product:
the user agent that implements the interfaces that it contains.

Conformance requirements phrased as algorithms or specific steps may be
implemented in any manner, so long as the end result is equivalent. (In
particular, the algorithms defined in this specification are intended to be
easy to follow, and not intended to be performant.)

Implementations that use ECMAScript to implement the APIs defined in this
specification MUST implement them in a manner consistent with the ECMAScript
Bindings defined in the Web IDL specification [[!WEBIDL]], as this
specification uses that specification and terminology.

# Terminology # {#terminology}

Terminology definitions go here.

# <dfn interface>RTCRtpTransport</dfn> Interface # {#rtptransport}

<pre class="idl">
[Exposed=(Window)]
interface RTCRtpTransport {
  attribute EventHandler onpacketizedrtpavailable;
  sequence&lt;RTCRtpPacket&gt; readPacketizedRtp(unsigned long maxNumberOfPackets);
  // BYOP: Copies the read packets into `dstPackets`, returning the number of packets written (up to `dstPackets.length`).
  unsigned long readPacketizedRtp(sequence&lt;RTCRtpPacket&gt; dstPackets);

  attribute EventHandler onsentrtp;
  // Batch interface to read RTCRtpSent notifications.
  sequence&lt;RTCRtpSent&gt; readSentRtp(long maxCount);

  attribute EventHandler onreceivedrtpacks;  // No payload. Use readReceivedRtpAcks
  // Batch interface to read RTCRtpAcks as an alternative to onrtpacksreceived.
  sequence&lt;RTCRtpAcks&gt; readReceivedRtpAcks(long maxCount);

  readonly attribute unsigned long bandwidthEstimate;  // bps
  readonly attribute unsigned long allocatedBandwidth;  // bps
  attribute unsigned long customAllocatedBandwidth;  // writable
  // Means "when doing bitrate allocation and rate control, don't use more than this"
  attribute unsigned long customMaxBandwidth;
  // Means "make each packet smaller by this much so I can put custom stuff in each packet"
  attribute unsigned long customPerPacketOverhead;
};

</pre>

## Attributes ## {#rtptransport-attributes}

<dl dfn-for="RTCRtpTransport">
    <dt>
        <dfn attribute>onpacketizedrtpavailable</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>onsentrtp</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>onreceivedrtpacks</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>bandwidthEstimate</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>allocatedBandwidth</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>customAllocatedBandwidth</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>customMaxBandwidth</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>customPerPacketOverhead</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## Methods ## {#rtptransport-methods}

<dl dfn-for="RTCRtpTransport">
    <dt>
        <dfn method>readPacketizedRtp(unsigned long maxNumberOfPackets)</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>readPacketizedRtp(sequence&lt;RTCRtpPacket&gt; dstPackets)</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>readSentRtp(long maxCount)</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>readReceivedRtpAcks(long maxCount)</dfn>
    </dt>
    <dd>
    </dd>
</dl>

# Objects

## <dfn interface>RTCRtpPacket</dfn> Interface ## {#rtppacket}

<pre class="idl">
[Exposed=(Window)]
interface RTCRtpPacket {
  constructor(RTCRtpPacketInit init);
  // BYOP: Construct a packet that can be used as destination for writing read packets.
  constructor();

  attribute boolean marker;
  attribute octet payloadType;
  attribute unsigned short sequenceNumber;
  attribute unsigned long timestamp;
  attribute unsigned long ssrc;
  attribute sequence&lt;unsigned long&gt; csrcs;
  attribute sequence&lt;RTCRtpHeaderExtension&gt; headerExtensions;
  attribute unsigned long paddingBytes;

  attribute AllowSharedBufferSource payload;

  // OPTIONAL: Extra information that may be useful to know
  attribute DOMHighResTimeStamp? receivedTime;
  attribute unsigned long? sequenceNumberRolloverCount;
};
</pre>

<dl dfn-for="RTCRtpPacket">
    <dt>
        <dfn attribute>marker</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>payloadType</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>sequenceNumber</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>timestamp</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>ssrc</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>csrcs</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>headerExtensions</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>paddingBytes</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>receivedTime</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>sequenceNumberRolloverCount</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## <dfn interface>RTCRtpHeaderExtension</dfn> Interface ## {#rtpheaderextension}

<pre class="idl">
[Exposed=(Window)]
interface RTCRtpHeaderExtension {
  constructor(RTCRtpHeaderExtensionInit init);
  readonly attribute DOMString uri;
  readonly attribute unsigned long valueByteLength;

  // Write the extension's value to the specified (Shared-)ArrayBuffer/ArrayBufferView,
  // allowing for BYOB. Throws a TypeError if |destination| is smaller than
  // |valueByteLength|.
  undefined copyValueTo(AllowSharedBufferSource destination);
};
</pre>

<dl dfn-for="RTCRtpHeaderExtension">
    <dt>
        <dfn attribute>uri</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>valueByteLength</dfn>
    </dt>
    <dd>
    </dd>
</dl>

<dl dfn-for="RTCRtpHeaderExtension">
    <dt>
        <dfn method>copyValueTo(AllowSharedBufferSource destination)</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## <dfn dictionary>RTCRtpHeaderExtensionInit</dfn> Dictionary ## {#rtpheaderextensioninit}

<pre class="idl">
dictionary RTCRtpHeaderExtensionInit {
  required DOMString uri;
  required AllowSharedBufferSource value;
};
</pre>

<dl dfn-for="RTCRtpHeaderExtensionInit">
    <dt>
        <dfn dict-member>uri</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn dict-member>value</dfn>
    </dt>
    <dd>
    </dd>
</dl> 

## <dfn dictionary>RTCRtpPacketInit</dfn> Dictionary ## {#rtppacketinit}

<pre class="idl">
dictionary RTCRtpPacketInit {
  boolean marker = false;
  required octet payloadType;
  required unsigned long timestamp;
  sequence&lt;unsigned long&gt; csrcs = [];
  // Cannot be MID, RID, or congestion control sequence number
  sequence&lt;RTCRtpHeaderExtensionInit&gt; headerExtensions = [];
  required AllowSharedBufferSource payload;
  // Causes padding bit to be set and padding added when serializing if &gt; 0.
  unsigned long paddingBytes = 0;
};
</pre>

<dl dfn-for="RTCRtpPacketInit">
    <dt>
        <dfn dict-member>marker</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn dict-member>payloadType</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn dict-member>timestamp</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn dict-member>csrcs</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn dict-member>headerExtensions</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn dict-member>payload</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn dict-member>paddingBytes</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## <dfn interface>RTCRtpAcks</dfn> Interface ## {#rtpacks}

<pre class="idl">
[Exposed=(Window)]
interface RTCRtpAcks {
  sequence&lt;RTCRtpAck&gt; getAcks();
  readonly attribute unsigned long long remoteSendTimestamp;
  readonly attribute DOMHighResTimeStamp receivedTime;
  readonly attribute RTCExplicitCongestionNotification explicitCongestionNotification;  // AKA "ECN"
};
</pre>

<dl dfn-for="RTCRtpAcks">
    <dt>
        <dfn method>getAcks()</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>remoteSendTimestamp</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>receivedTime</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>explicitCongestionNotification</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## <dfn interface>RTCRtpAck</dfn> ## {#rtpack}

<pre class="idl">
[Exposed=(Window)]
interface RTCRtpAck {
  // Correlated with RtpSent.ackId
  readonly attribute unsigned long long ackId; 
  readonly attribute unsigned long long remoteReceiveTimestamp;
};
</pre>

<dl dfn-for="RTCRtpAck">
    <dt>
        <dfn attribute>ackId</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>remoteReceiveTimestamp</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## <dfn enum>RTCExplicitCongestionNotification</dfn> ## {#explicitcongestionnotification}

<pre class="idl">
enum RTCExplicitCongestionNotification {
  // ECT = ECN-Capable Transport
  "unset",  // AKA "Not-ECT";  Bits: 00
  "scalable-congestion-not-experienced",  // AKA "ECT(1)" or "Scalable" or "L4S" ; Bits: 01
  "classic-congestion-not-experienced", // AKA "ECT(0)" or "Classic" or "not L4S"; Bits: 10
  "congestion-experienced" // AKA "CE" or "ECN-marked" or "marked"; Bits: 11
};
</pre>

# <dfn interface>RTCRtpPacketSender</dfn> Interface # {#rtpsentstream}

<pre class="idl">
[Exposed=(Window,Worker), Transferable]
interface RTCRtpPacketSender {
  readonly attribute DOMString? mid;
  readonly attribute DOMString? rid;
  readonly attribute unsigned long ssrc;
  readonly attribute unsigned long rtxSsrc;

  attribute EventHandler onpacketizedrtp;
  sequence&lt;RTCRtpPacket&gt; readPacketizedRtp(unsigned long maxNumberOfPackets);
  // BYOP: Copies the read packets into `dstPackets`, returning the number of packets written (up to `dstPackets.length`).
  unsigned long readPacketizedRtp(sequence&lt;RTCRtpPacket&gt; dstPackets);

  // https://github.com/w3c/webrtc-rtptransport/issues/32
  undefined sendRtp(RTCRtpPacket packet);
  Promise&lt;RTCRtpSendResult&gt; sendRtp(RTCRtpPacketInit packetInit, optional RTCRtpSendOptions options = {});

  // Amount allocated by the browser
  readonly attribute unsigned long allocatedBandwidth;
};
</pre>

<dl dfn-for="RTCRtpPacketSender">
    <dt>
        <dfn attribute>mid</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>rid</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>ssrc</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>rtxSsrc</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>onpacketizedrtp</dfn>
    </dt>
    <dd>
    </dd>
</dl>

<dl dfn-for="RTCRtpPacketSender">
    <dt>
        <dfn method>readPacketizedRtp(unsigned long maxNumberOfPackets)</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>readPacketizedRtp(sequence&lt;RTCRtpPacket&gt; dstPackets)</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>sendRtp(RTCRtpPacket packet)</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>sendRtp(RTCRtpPacketInit packetInit, optional RTCRtpSendOptions options = {})</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## <dfn interface>RTCRtpSendResult</dfn> Interface ## {#rtpsentresult}

<pre class="idl">
[Exposed=(Window)]
interface RTCRtpSendResult {
  readonly attribute RTCRtpSent? sent;
  readonly attribute RTCRtpUnsentReason? unsent;
};
</pre>

<dl dfn-for="RTCRtpSendResult">
    <dt>
        <dfn attribute>sent</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>unsent</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## <dfn interface>RTCRtpSent</dfn> Interface ## {#rtpsent}

<pre class="idl">
[Exposed=(Window)]
interface RTCRtpSent {
  readonly attribute DOMHighResTimeStamp time;

  // Can be correlated with acks
  readonly attribute unsigned long long? ackId;
  readonly attribute unsigned long long size;
};
</pre>

<dl dfn-for="RTCRtpSent">
    <dt>
        <dfn attribute>time</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>ackId</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>size</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## <dfn enum>RTCRtpUnsentReason</dfn> Enum ## {#RTCRtpUnsentReason}

<pre class="idl">
enum RTCRtpUnsentReason {
  "overuse",
  "transport-unavailable",
};
</pre>

## <dfn dictionary>RTCRtpSendOptions</dfn> Dictionary ## {#rtpsendoptions}

<pre class="idl">
dictionary RTCRtpSendOptions {
  DOMHighResTimeStamp sendTime;
};
</pre>

<dl dfn-for="RTCRtpSendOptions">
    <dt>
        <dfn dict-member>sendTime</dfn>
    </dt>
    <dd>
    </dd>
</dl>

# <dfn interface>RTCRtpPacketReceiver</dfn> Interface # {#rtppacketreceiver}

<pre class="idl">
[Exposed=(Window,Worker), Transferable]
interface RTCRtpPacketReceiver {
  readonly attribute DOMString? mid;
  readonly attribute DOMString? rid;  // Unique to RTCRtpPacketReceiver (scoped to MID)
  sequence&lt;unsigned long&gt; getSsrcs();
  sequence&lt;unsigned long&gt; getRtxSsrcs();

  attribute EventHandler onreceivedrtp;
  sequence&lt;RTCRtpPacket&gt; readReceivedRtp(long maxNumberOfPackets);
  // BYOP: Copies the read packets into `dstPackets`, returning the number of packets written (up to `dstPackets.length`).
  unsigned long readReceivedRtp(sequence&lt;RTCRtpPacket&gt; dstPackets);

  undefined receiveRtp(RTCRtpPacket packet);
};
</pre>

<dl dfn-for="RTCRtpPacketReceiver">
    <dt>
        <dfn attribute>mid</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>rid</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn attribute>onreceivedrtp</dfn>
    </dt>
    <dd>
    </dd>
</dl>

<dl dfn-for="RTCRtpPacketReceiver">
    <dt>
        <dfn method>readReceivedRtp(long maxNumberOfPackets)</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>readReceivedRtp(sequence&lt;RTCRtpPacket&gt; dstPackets)</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>receiveRtp(RTCRtpPacket packet)</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>getSsrcs()</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>getRtxSsrcs()</dfn>
    </dt>
    <dd>
    </dd>
</dl>

# Interface Extensions # {#interface-extensions}

## RTCPeerConnection Interface Extensions ## {#rtcpeerconnection-extensions}

<pre class="idl">
partial interface RTCPeerConnection {
  // There may be an RtpTransport with no RtpSenders and no RtpReceivers.
  readonly attribute RTCRtpTransport? rtpTransport;
};
</pre>

<dl dfn-for="RTCPeerConnection">
    <dt>
        <dfn attribute>rtpTransport</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## RTCRtpSender Interface Extensions ## {#rtcrtpsender-extensions}

<pre class="idl">
partial interface RTCRtpSender {
  // shared between RTCRtpSenders in the same BUNDLE group
  readonly attribute RTCRtpTransport? rtpTransport;
  Promise&lt;RTCRtpPacketSender&gt; replacePacketSender();
};
</pre>

<dl dfn-for="RTCRtpSender">
    <dt>
        <dfn attribute>rtpTransport</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>replacePacketSender()</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## RTCConfiguration Dictionary Extensions ## {#rtcconfiguration-extensions}

<pre class="idl">
partial dictionary RTCConfiguration {
  // Means "continue to encode and packetize packets, but don't send them.
  // Instead give them to me via onpacketizedrtpavailable/readPacketizedRtp
  // and I will send them."
  // TODO: Think of a better name
  boolean customPacer;
};
</pre>

<dl dfn-for="RTCConfiguration">
    <dt>
        <dfn dict-member>customPacer</dfn>
    </dt>
    <dd>
    </dd>
</dl>

## RTCRtpReceiver Interface Extensions ## {#rtcrtpreceiver-extensions}

<pre class="idl">
partial interface RTCRtpReceiver {
  // shared between RTCRtpSenders in the same BUNDLE group
  readonly attribute RTCRtpTransport? rtpTransport;
  Promise&lt;RTCRtpPacketReceiver&gt; replacePacketReciever();
};
</pre>

<dl dfn-for="RTCRtpReceiver">
    <dt>
        <dfn attribute>rtpTransport</dfn>
    </dt>
    <dd>
    </dd>
    <dt>
        <dfn method>replacePacketReciever()</dfn>
    </dt>
    <dd>
    </dd>
</dl>

# Privacy and security considerations # {#privacy}

## Confidentiality of Communications ## {#confidentiality}

## State Persistence ## {#state-persistence}

## Protocol Security ## {#protocol-security}

## Fingerprinting and Tracking ## {#fingerprinting}

# Examples # {#examples}

See the [explainer document](https://github.com/w3c/webrtc-rtptransport/blob/main/explainer.md#code-examples).

# Acknowledgements #  {#acknowledgements}
The editors wish to thank the WEBRTC Working Group chairs and Team Contact for their support.
